import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth/next';
// ÿß€åŸÜ ŸÅÿß€åŸÑ ÿßÿ≠ÿ™ŸÖÿßŸÑÿßŸã 3 ŸÜŸÇÿ∑Ÿá ŸÜ€åÿßÿ≤ ÿØÿßÿ±ÿØ:
import { authOptions } from '../../../../lib/auth';
import prisma from '../../../../lib/database';

export const dynamic = 'force-dynamic';
export const revalidate = 0;



export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session?.user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { searchParams } = new URL(request.url);
    const containerId = searchParams.get('containerId');

    console.log('üîÑ Fetching UAE data for container:', containerId);
    console.log('üë§ User role:', session.user.role);
    console.log('üë§ User ID:', session.user.id);

    if (!containerId) {
      return NextResponse.json({ error: 'Container ID is required' }, { status: 400 });
    }

    // ÿ®ÿ±ÿ±ÿ≥€å Ÿàÿ¨ŸàÿØ ⁄©ÿßŸÜÿ™€åŸÜÿ±
    const container = await prisma.purchaseContainer.findUnique({
      where: { id: containerId },
      include: {
        user: {
          select: {
            id: true,
            username: true,
            name: true
          }
        }
      }
    });

    if (!container) {
      console.log('‚ùå Container not found:', containerId);
      return NextResponse.json({ error: 'Container not found' }, { status: 404 });
    }

    console.log('üì¶ Container found:', container.containerId);
    console.log('üì¶ Container user ID:', container.userId);

    // ŸÖÿØ€åÿ±ÿßŸÜ ÿ®Ÿá ŸáŸÖŸá ÿØÿßÿØŸá‚ÄåŸáÿß ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿØÿßÿ±ŸÜÿØÿå ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ÿπÿßÿØ€å ŸÅŸÇÿ∑ ÿ®Ÿá ÿØÿßÿØŸá‚ÄåŸáÿß€å ÿÆŸàÿØÿ¥ÿßŸÜ
    if (session.user.role !== 'manager' && container.userId !== session.user.id) {
      console.log('‚ùå Access denied for user:', session.user.id);
      return NextResponse.json({ error: 'Access denied' }, { status: 403 });
    }

    // ÿØÿ±€åÿßŸÅÿ™ ÿØÿßÿØŸá‚ÄåŸáÿß€å ŸÅÿ±Ÿàÿ¥ Ÿà Ÿáÿ≤€åŸÜŸá‚ÄåŸáÿß
    const [sales, expends] = await Promise.all([
      prisma.uAESale.findMany({
        where: { containerId },
        orderBy: { number: 'asc' }
      }),
      prisma.uAEExpend.findMany({
        where: { containerId },
        orderBy: { createdAt: 'asc' }
      })
    ]);

    console.log('‚úÖ Sales found:', sales.length);
    console.log('‚úÖ Expends found:', expends.length);

    return NextResponse.json({ 
      success: true,
      sales: sales || [],
      expends: expends || [],
      container
    });

  } catch (error) {
    console.error('‚ùå Error fetching UAE data:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session?.user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const body = await request.json();
    const { containerId, sales, expends } = body;

    console.log('üíæ Saving UAE data for container:', containerId);
    console.log('üë§ User role:', session.user.role);

    if (!containerId) {
      return NextResponse.json({ error: 'Container ID is required' }, { status: 400 });
    }

    // ÿ®ÿ±ÿ±ÿ≥€å ÿØÿ≥ÿ™ÿ±ÿ≥€å ⁄©ÿßÿ±ÿ®ÿ±
    const container = await prisma.purchaseContainer.findUnique({
      where: { id: containerId }
    });

    if (!container) {
      return NextResponse.json({ error: 'Container not found' }, { status: 404 });
    }

    // ŸÅŸÇÿ∑ ŸÖÿØ€åÿ±ÿßŸÜ ŸÖ€å‚Äåÿ™ŸàÿßŸÜŸÜÿØ ÿØÿßÿØŸá‚ÄåŸáÿß€å ŸÅÿ±Ÿàÿ¥ ÿßŸÖÿßÿ±ÿßÿ™ ÿ±ÿß ÿ∞ÿÆ€åÿ±Ÿá ⁄©ŸÜŸÜÿØ
    if (session.user.role !== 'manager') {
      return NextResponse.json({ error: 'Only managers can save UAE sales data' }, { status: 403 });
    }

    await prisma.$transaction(async (tx) => {
      // ÿ≠ÿ∞ŸÅ ÿØÿßÿØŸá‚ÄåŸáÿß€å ŸÇÿ®ŸÑ€å
      await tx.uAESale.deleteMany({ where: { containerId } });
      await tx.uAEExpend.deleteMany({ where: { containerId } });

      // ÿ∞ÿÆ€åÿ±Ÿá ÿØÿßÿØŸá‚ÄåŸáÿß€å ÿ¨ÿØ€åÿØ
      if (sales?.length > 0) {
        await tx.uAESale.createMany({
          data: sales.map((sale: any) => ({
            containerId,
            userId: session.user.id,
            number: sale.number,
            item: sale.item,
            salePrice: sale.salePrice,
            lotNumber: sale.lotNumber,
            note: sale.note
          }))
        });
      }

      if (expends?.length > 0) {
        await tx.uAEExpend.createMany({
          data: expends.map((expend: any) => ({
            containerId,
            userId: session.user.id,
            category: expend.category,
            amount: expend.amount,
            description: expend.description
          }))
        });
      }
    });

    console.log('‚úÖ UAE data saved successfully for container:', containerId);

    return NextResponse.json({ 
      success: true,
      message: 'Data saved successfully' 
    });

  } catch (error) {
    console.error('‚ùå Error saving UAE data:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}